@page "/open-tasks"
@using ShareCare.Services
@using ShareCare.Module
@inject TaskService TaskService
@inject UserService UserService
@inject CustomAuthenticationStateProvider AuthStateProvider

<div class="opentasks-wrapper">
    <div class="opentasks-scrollable">
        <h3>Open <span>Tasks</span></h3>

        <div class="button-container">
            <button class="btn btn-primary" @onclick="ShowTaskFormModal">
                Add New Task
            </button>

            <button class="btn btn-primary">
                Completed Tasks
            </button>
        </div>

        <div class="new-task-modal @modalVisibleClass">
            <div class="new-task-form">
                <button class="close-modal-btn" @onclick="HideTaskFormModal">&times;</button>

                <h4>Create New Task</h4>

                <label>Task Type:</label>
                <select @bind="selectedTaskTypeId" class="form-select">
                    <option value="0" selected disabled>Select a task type</option>
                    @if (taskTypes != null && taskTypes.Count > 0)
                    {
                        @foreach (var taskType in taskTypes)
                        {
                                    <option value="@taskType.TaskTypeID">@taskType.Name</option>
                        }
                    }
                    else
                    {
                            <option disabled>No task types available</option>
                    }
                </select>

                <label>Summary:</label>
                <input type="text" @bind="taskSummary" class="form-input" placeholder="Enter task summary" />

                <label>Date:</label>
                <input type="date" @bind="taskDate" class="form-input" min="@DateTime.Now.ToString("yyyy-MM-dd")" />

                <label>Assign To:</label>
                <select multiple class="form-select" @onchange="HandlePersonSelection">
                    @if (persons != null && persons.Count > 0)
                    {
                        @foreach (var person in persons)
                        {
                                    <option value="@person.PersonID">@person.FirstName @person.LastName</option>
                        }
                    }
                    else
                    {
                            <option disabled>No persons available</option>
                    }
                </select>

                <label>Room:</label>
                <select @bind="selectedRoomId" class="form-select">
                    <option value="0" selected disabled>Select a room</option>
                    @if (rooms != null && rooms.Count > 0)
                    {
                        @foreach (var room in rooms)
                        {
                                    <option value="@room.RoomID">@room.Name</option>
                        }
                    }
                    else
                    {
                            <option disabled>No rooms available</option>
                    }
                </select>

                <button class="btn btn-primary" @onclick="CreateTask">Create Task</button>
                <button class="btn btn-secondary" @onclick="HideTaskFormModal">Cancel</button>
            </div>
        </div>
    </div>

    @if (tasks == null)
    {
            <p><em>Loading tasks...</em></p>
    }
    else if (tasks.Count == 0)
    {
            <p>No open tasks available.</p>
    }
    else
    {
            <div class="task-cards">
            @foreach (var task in tasks)
            {
                        <div class="task-card">
                            <div class="task-header">
                                <h4>@task.Type</h4>
                                <p><strong>@task.Date.ToString("dd/MM/yyyy")</strong></p>
                            </div>
                            <p><strong>Summary:</strong> @task.Summary</p>
                            <p>
                                <strong>Assigned to:</strong>
                        @if (task.Persons != null && task.Persons.Any())
                        {
                                        <ul>
                                @foreach (var person in task.Persons)
                                {
                                                    <li>@person.FirstName @person.LastName</li>
                                }
                                        </ul>
                        }
                        else
                        {
                                        <span>No persons assigned</span>
                        }
                            </p>
                            <p><strong>Room:</strong> @task.RoomName</p>
                            <button class="btn btn-done" @onclick="() => RemoveTask(task.TaskID)">Finish Task</button>
                        </div>
            }
            </div>
    }
</div>

@code {
    private List<ShareCare.Module.Task> tasks;
    private List<TaskType> taskTypes;
    private List<Person> persons;
    private List<Room> rooms;
    private int selectedTaskTypeId = 0;
    private string taskSummary = string.Empty;
    private DateTime taskDate = DateTime.Now;
    private List<int> selectedPersonIds = new List<int>();
    private int selectedRoomId = 0;

    private bool isTaskFormVisible = false;
    private string modalVisibleClass => isTaskFormVisible ? "active" : "";

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        try
        {
            tasks = await TaskService.GetOpenTasksAsync();
            taskTypes = await TaskService.GetTaskTypesAsync();
            persons = await UserService.GetUsersAsync();
            var buildings = await TaskService.GetBuildingsAsync();
            rooms = new List<Room>();
            foreach (var building in buildings)
            {
                rooms.AddRange(building.Rooms);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error during initialization: {ex.Message}");
        }
    }


    private async System.Threading.Tasks.Task RemoveTask(int taskId)
    {
        try
        {
            var success = await TaskService.DeleteTaskAsync(taskId);
            if (success)
            {
                tasks = await TaskService.GetOpenTasksAsync();
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Failed to delete the task.");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error removing task: {ex.Message}");
        }
    }

    private async System.Threading.Tasks.Task CreateTask()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(taskSummary) || !selectedPersonIds.Any() || selectedTaskTypeId == 0 || selectedRoomId == 0)
            {
                System.Diagnostics.Debug.WriteLine("Please fill out all fields.");
                return;
            }

            var success = await TaskService.AddTaskAsync(selectedTaskTypeId, taskSummary, taskDate, selectedPersonIds, selectedRoomId);

            if (success)
            {
                tasks = await TaskService.GetOpenTasksAsync();
                System.Diagnostics.Debug.WriteLine("Task created successfully.");
                HideTaskFormModal();
                ClearForm();
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Failed to create the task.");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error creating task: {ex.Message}");
        }
    }

    private void HandlePersonSelection(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;

        if (selectedOptions != null)
        {
            selectedPersonIds = selectedOptions.Select(int.Parse).ToList();
        }
    }

    private void ClearForm()
    {
        selectedTaskTypeId = 0;
        taskSummary = string.Empty;
        taskDate = DateTime.Now;
        selectedPersonIds.Clear();
        selectedRoomId = 0;
    }

    private void ShowTaskFormModal()
    {
        isTaskFormVisible = true;
    }

    private void HideTaskFormModal()
    {
        isTaskFormVisible = false;
    }
}