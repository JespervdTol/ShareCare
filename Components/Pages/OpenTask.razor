@page "/open-tasks"
@using ShareCare.Services
@using ShareCare.Module
@inject TaskService TaskService
@inject UserService UserService

<h3>Open Tasks</h3>

<!-- Button to Show/Hide the Task Creation Form -->
<button class="btn btn-primary" @onclick="ToggleTaskForm">
    Add New Task
</button>

<!-- Task Creation Form (Initially hidden) -->
@if (isTaskFormVisible)
{
        <div class="new-task-form">
            <label>Task Type:</label>
            <select @bind="selectedTaskTypeId">
            @if (taskTypes != null && taskTypes.Count > 0)
            {
                @foreach (var taskType in taskTypes)
                {
                                <option value="@taskType.TaskTypeID">@taskType.Name</option>
                }
            }
            else
            {
                        <option disabled>No task types available</option>
            }
            </select>

            <label>Summary:</label>
            <input type="text" @bind="taskSummary" />

            <label>Date:</label>
            <input type="date" @bind="taskDate" />

            <label>Assign To:</label>
            <select @bind="selectedPersonId">
            @if (persons != null && persons.Count > 0)
            {
                @foreach (var person in persons)
                {
                                <option value="@person.PersonID">@person.FirstName @person.LastName</option>
                }
            }
            else
            {
                        <option disabled>No persons available</option>
            }
            </select>

            <button class="btn btn-primary" @onclick="CreateTask">Create Task</button>
            <button class="btn btn-secondary" @onclick="ToggleTaskForm">Cancel</button>
        </div>
}

@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else if (tasks.Count == 0)
{
    <p>No open tasks available.</p>
}
else
{
    <div class="task-cards">
        @foreach (var task in tasks)
        {
            @if (task != null)
            {
                <div class="task-card">
                    <div class="task-header">
                        <h4>@task.Type</h4>
                        <p><strong>@task.Date.ToString("yyyy-MM-dd")</strong></p>
                    </div>
                    <p><strong>Summary:</strong> @task.Summary</p>
                    <p><strong>Assigned to:</strong> @task.Person</p>
                    <button class="btn btn-danger" @onclick="() => RemoveTask(task.TaskID)">Done</button>
                </div>
            }
        }
    </div>
}

@code {
    private List<ShareCare.Module.Task> tasks;
    private List<TaskType> taskTypes;
    private List<Person> persons;
    private int selectedTaskTypeId;
    private string taskSummary;
    private DateTime taskDate = DateTime.Now;
    private int selectedPersonId;

    // Track whether the form is visible
    private bool isTaskFormVisible = false;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        try
        {
            tasks = await TaskService.GetOpenTasksAsync();
            taskTypes = await TaskService.GetTaskTypesAsync();
            persons = await UserService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
        }
    }

    private async System.Threading.Tasks.Task RemoveTask(int taskId)
    {
        try
        {
            var success = await TaskService.DeleteTaskAsync(taskId);
            if (success)
            {
                tasks = await TaskService.GetOpenTasksAsync();
            }
            else
            {
                Console.WriteLine("Failed to delete the task.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing task: {ex.Message}");
        }
    }

    private async System.Threading.Tasks.Task CreateTask()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(taskSummary) || selectedPersonId == 0 || selectedTaskTypeId == 0)
            {
                Console.WriteLine("Please fill out all fields.");
                return;
            }

            var success = await TaskService.AddTaskAsync(selectedTaskTypeId, taskSummary, taskDate, selectedPersonId);
            if (success)
            {
                tasks = await TaskService.GetOpenTasksAsync();
                Console.WriteLine("Task created successfully.");
                ToggleTaskForm(); // Hide form after task is created
            }
            else
            {
                Console.WriteLine("Failed to create the task.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating task: {ex.Message}");
        }
    }

    // Toggle visibility of the task creation form
    private void ToggleTaskForm()
    {
        isTaskFormVisible = !isTaskFormVisible;
    }
}