@page "/calendar"
@using ShareCare.Services
@using ShareCare.Module
@inject TaskService TaskService
@inject EventService EventService
@using System.Globalization

<h3>Calendar</h3>

<div class="legend">
    <div class="legend-item">
        <span class="box task"></span>Tasks
    </div>
    <div class="legend-item">
        <span class="box event"></span>Events
    </div>
    
</div>

<div class="calendar">
    <div class="navigation">
        <button @onclick="PrevWeek">‹</button>
        <span>WEEK @currentWeek<br> @startOfWeek.Year</span>
        <button @onclick="NextWeek">›</button>
    </div>

    <div class="days">
        @foreach (var day in weekDays)
        {
            <div class="day">
                <div class="date">
                    <span class="day-of-week">@day.Date.ToString("ddd").ToUpper()</span>
                    <strong class="date-day">@day.Date.ToString("dd")</strong>
                    <span class="date-month">@day.Date.ToString("MMM")</span>
                </div>
                <div class="tasks">
                    @if (day.Tasks.Any())
                    {
                        @foreach (var task in day.Tasks)
                        {
                            <div class="task" @onclick="() => OpenTaskModal(task)">
                                <p class="summary">@task.Summary</p>
                                <span class="user">@task.Person</span>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No tasks</p>
                    }

                    @if (day.Events.Any())
                    {
                        @foreach (var ev in day.Events)
                        {
                            <div class="event" @onclick="() => OpenEventModal(ev)">
                                <p class="summary"><strong>@ev.Summary</strong></p>
                                <p class="room"> @string.Join(", ", ev.Rooms.Select(r => r.Name))</p>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No events</p>
                    }
                </div>
            </div>
        }
    </div>
</div>

@if (selectedTask != null)
{
    <div class="modal @(selectedTask != null ? "active" : "")" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="close" @onclick="CloseModal">×</button>
            <h2>Task Details</h2>
            <p><strong>Task Type:</strong> @selectedTask.Type</p>
            <p><strong>Summary:</strong> @selectedTask.Summary</p>
            <p><strong>Date:</strong> @selectedTask.Date.ToString("dd/MM/yyyy")</p>
            <p><strong>Assigned Person:</strong> @selectedTask.Person</p>
            <p><strong>Room:</strong> @selectedTask.RoomName</p>
        </div>
    </div>
}

@if (selectedEvent != null)
{
    <div class="modal @(selectedEvent != null ? "active" : "")" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="close" @onclick="CloseModal">×</button>
            <h2>Event Details</h2>
            <p><strong>Summary:</strong> @selectedEvent.Summary</p>
            <p><strong>Date:</strong> @selectedEvent.Date.ToString("dd/MM/yyyy")</p>
            <p><strong>Time:</strong> @selectedEvent.StartTime.ToString("HH:mm") - @selectedEvent.EndTime.ToString("HH:mm")</p>
            <p><strong>Host:</strong> @string.Join(", ", selectedEvent.Persons.Select(p => p.FirstName + " " + p.LastName))</p>
            <p><strong>Rooms:</strong> @string.Join(", ", selectedEvent.Rooms.Select(r => r.Name))</p>
        </div>
    </div>
}

@code {
    private int currentWeek;
    private DateTime startOfWeek;
    private List<DayInfo> weekDays = new();
    private ShareCare.Module.Task selectedTask;
    private ShareCare.Module.Event selectedEvent;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        startOfWeek = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);
        currentWeek = GetWeekOfYear(startOfWeek);

        await LoadTasksAndEvents();
    }

    private async System.Threading.Tasks.Task LoadTasksAndEvents()
    {
        weekDays.Clear();
        var tasks = await TaskService.GetTasksForWeekAsync(startOfWeek);
        var events = await EventService.GetEventsAsync();

        for (int i = 0; i < 7; i++)
        {
            var date = startOfWeek.AddDays(i);
            weekDays.Add(new DayInfo
                {
                    Date = date,
                    Tasks = tasks.Where(t => t.Date.Date == date).ToList(),
                    Events = events.Where(e => e.Date.Date == date).ToList()
                });
        }
    }

    private async System.Threading.Tasks.Task PrevWeek()
    {
        startOfWeek = startOfWeek.AddDays(-7);
        currentWeek = GetWeekOfYear(startOfWeek);
        await LoadTasksAndEvents();
    }

    private async System.Threading.Tasks.Task NextWeek()
    {
        startOfWeek = startOfWeek.AddDays(7);
        currentWeek = GetWeekOfYear(startOfWeek);
        await LoadTasksAndEvents();
    }

    private int GetWeekOfYear(DateTime date)
    {
        var cultureInfo = new CultureInfo("nl-NL");
        var calendar = cultureInfo.Calendar;
        var dateTimeFormat = cultureInfo.DateTimeFormat;
        return calendar.GetWeekOfYear(date, dateTimeFormat.CalendarWeekRule, dateTimeFormat.FirstDayOfWeek);
    }

    private void OpenTaskModal(ShareCare.Module.Task task)
    {
        selectedTask = task;
        selectedEvent = null;
    }

    private void OpenEventModal(ShareCare.Module.Event ev)
    {
        selectedEvent = ev;
        selectedTask = null;
    }

    private void CloseModal()
    {
        selectedTask = null;
        selectedEvent = null;
    }

    private class DayInfo
    {
        public DateTime Date { get; set; }
        public List<ShareCare.Module.Task> Tasks { get; set; } = new();
        public List<ShareCare.Module.Event> Events { get; set; } = new();
    }
}